@use 'sass:color';
@use 'sass:math';
@use 'sass:list';
@use 'sass:string';

$sass-precision: 5;

@function to-rel($value, $base: 16px) {
  $unitless: strip-unit($value);
  @if ($unitless == 0) {
    @return 0;
  }
  @if (math.unit($value) == '%') {
    @return math.div($value, 100%);
  }
  @if (math.is-unitless($value)) {
    @return $value;
  }
  @if (math.compatible($value, $base)) {
    @return to-fixed(math.div($value, $base));
  }
  @return $unitless;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function to-string($list, $glue: '') {
  $result: nth($list, 1);

  @if length($list) > 1 {
    @for $i from 2 through length($list) {
      $result: $result + $glue + nth($list, $i);
    }
  }

  @return $result;
}

@function to-fixed($float, $digits: 4) {
  @if $digits > $sass-precision {
    @warn "Sass sets default precision to #{$sass-precision} digits";
  }

  $pow: math.pow(10, $digits);
  @return math.div(math.round($float * $pow), $pow);
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  $number: if($minus, -$result, $result);

  @if ('' + $number != $value) {
    @return null;
  }

  @return $number;
}

@function deep-map-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @return null;
    }

    $map: map-get($map, $key) or map-get($map, to-number($key));
  }

  @return $map;
}

@function deep-map-check($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @return false;
    }

    @if (
      not map-has-key($map, $key) and not map-has-key($map, to-number($key))
    ) {
      @return false;
    }

    $map: map-get($map, $key) or map-get($map, to-number($key));
  }

  @return true;
}

@function starts-with($string, $value) {
  @return string.index($string, $value) == 1;
}

@function ends-with($string, $value) {
  @return string.slice($string, -1 * string.length($value)) == $value;
}

@function to-percent($value) {
  @if (type-of($value) != 'number') {
    @error 'to-percent() only works with numbers';
  }
  @if (math.is-unitless($value)) {
    @return math.percentage($value);
  }
  @if (math.unit($value) == '%') {
    @return $value;
  }
  @error 'to-percent() only works with numbers';
}
