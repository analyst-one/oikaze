@use 'sass:map';
@use 'sass:string';
@use 'sass:color';
@use 'sass:math';
@use 'sass:list';

@use './helpers' as *;

$sets: () !default;
$default: 'default' !default;

// TODO: make part of config
$rgb-suffix: '--rgb';
$em-suffix: '--em';
$base-key: 'base';
$config-key: 'CONFIG';
$default-base: 16px;

// Private
@function -get-value($map: $default, $keys...) {
  @if not map.has-key($map, $keys...) {
    @error "'#{$keys}' is not defined.";
  }
  @return map.get($map, $keys...);
}

// Gets a CSS variable key
@function -get-var($keys...) {
  $token: to-string($keys, '-');
  @return --#{$token};
}

@function -get-keys($path) {
  $is-by-value: string.index($path, '$') == 1;
  @if ($is-by-value) {
    $path: string.slice($path, 2);
  }
  @return string.split($path, '.');
}

@mixin -spread-value($map, $value, $keys...) {
  @if (not list.index($keys, $config-key)) {
    $spread: map.get($map, $config-key, 'spread');
    @if ($spread != false) {
      $base: map.get($map, $config-key, $base-key) or 16px;

      $_var: -get-var($keys...);
      #{$_var}: $value;

      @if (type-of($value) == 'color') {
        #{$_var}#{$rgb-suffix}: to-rgb($value);
      } @else if ($base and type-of($value) == 'number') {
        @if (math.compatible($value, $base)) {
          #{$_var}#{$em-suffix}: to-rel($value, $base);
        }
      }
    }
  }
}

// This mixin sets the CSS variables for a given theme.
@mixin -spread-variables($map: $default, $keys...) {
  @each $key, $value in $map {
    $_keys: list.append($keys, $key);
    @if (type-of($value) == 'map' and $key != $config-key) {
      @include -spread-variables($value, $_keys...);
    } @else if ($value and type-of($value) != 'list') {
      @include -spread-value($map, $value, $_keys...);
    }
  }
}

@function -em($path, $unit, $map) {
  $is-by-value: string.index($path, '$') == 1;

  $keys: -get-keys($path);
  $value: -get-value($map, $keys...);

  $config-keys: list.set-nth($keys, list.length($keys), $config-key);
  $config: map.get($map, $config-keys...);
  $base: if($config, map.get($config, $base-key), $default-base);

  $em: to-rel($value, $base or $default-base);

  @if ($is-by-value) {
    @return $em * $unit;
  }
  $_var: -get-var($keys...);
  @return calc(var(#{$_var}#{$em-suffix}, $em) * $unit);
}

@function -get-set($set-name: $default) {
  @if (not map.has-key($sets, $set-name)) {
    @error "'#{$set-name}' is not defined.";
  }
  @return map.get($sets, $set-name);
}

// Public

// This function returns the value for a given key.
// For example:
//   get('color.primary')    // returns var(--color-primary, #facd33)
//   get('$color.primary') // returns #facd33
@function get($token, $set-name: $default) {
  $map: -get-set($set-name);

  $is-by-value: string.index($token, '$') == 1;

  $keys: -get-keys($token);
  $value: -get-value($map, $keys...);

  @if ($is-by-value) {
    @return $value;
  }

  $_var: -get-var($keys...);
  @return var(#{$_var}, $value);
}

@mixin spread-variables($set-name: $default) {
  $set: -get-set($set-name);
  @include -spread-variables($set);
}

@mixin add-set($set-name, $map) {
  $sets: map.set($sets, $set-name, $map) !global;
}

// Translation functions

// This function returns the color value for a given key.
// For example:
//   tokens.with-opacity('color.primary', 0.2)    // returns rgba(var(--color-primary--rgb, 250,205,51), 0.2)
//   tokens.with-opacity('$color.primary', 0.2) // returns rgba(250, 205, 51, 0.2)
@function with-opacity($path, $alpha: 1, $set-name: $default) {
  $map: -get-set($set-name);

  $is-by-value: string.index($path, '$') == 1;

  $keys: -get-keys($path);
  $value: -get-value($map, $keys...);

  @if ($is-by-value) {
    @return rgba($value, $alpha);
  }
  $_var: -get-var($keys...);
  @return rgba(var(#{$_var}#{$rgb-suffix}, #{to-rgb($value)}), $alpha);
}

// This function returns the size value for a given key.
// For example:
//   tokens.rem('size.footer')    // returns calc(var(--size-footer, 46px) / var(--size-base, 16px) * 1rem)
//   tokens.rem('$size.footer')   // returns 2.875rem
@function rem($path, $set-name: $default) {
  $map: -get-set($set-name);
  @return -em($path, 1rem, $map);
}

@function em($path, $set-name: $default) {
  $map: -get-set($set-name);
  @return -em($path, 1em, $map);
}

// TODO: find a way to make this work with set-name
@mixin media($keys...) {
  $conditions: ();
  @each $key in $keys {
    $raw: get($key);
    $query: if(type-of($raw) == 'string', unquote($raw), inspect($raw));

    // TODO: error if not a value?
    $conditions: append($conditions, $query, comma);
  }

  @media #{$conditions} {
    @content;
  }
}
