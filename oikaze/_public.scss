@use 'sass:map';
@use 'sass:string';
@use 'helpers';

$sets: () !default;
$default: 'default' !default;
$config: () !default;

$defaut-config: (
  base: 16px,
  enable-define: true,
  enable-rgb: true,
  enable-em: true,
);

@use 'core' with (
  $sets: $sets,
  $default: $default,
  $config: map.merge($defaut-config, $config)
);

@forward 'core' show add-set, $sets, $default;

@function get($token) {
  $resolved: core.resolve-token($token);
  @return core.get-from-resolved($resolved);
}

@mixin define($token) {
  $resolved: core.resolve-token($token);
  $config: map.get($resolved, 'config');
  $enable-define: map.get($config, 'enable-define');

  @if ($enable-define != false) {
    @include core.define-var-from-resolved($resolved);
  }
}

@mixin css-definitions($set-name: null) {
  // css-definitions assumes the token is a set name

  $set-name: $set-name or '';
  @if (not string.index($set-name, ':')) {
    $set-name: $set-name + ':';
  }

  @each $token in all($set-name) {
    @include define($set-name + $token);
  }
}

@function prop($token) {
  $parsed: core.parse-token($token);
  @return map.get($parsed, 'var');
}

@function alpha($token, $alpha: 1) {
  $resolved: core.resolve-token($token);
  $is-by-value: map.get($resolved, 'by-value');
  $value: map.get($resolved, 'value');
  $type: map.get($resolved, 'type');

  @if ($type != 'color') {
    @error 'alpha() only works with colors';
  }

  @if ($is-by-value) {
    $value: map.get($resolved, 'final');
    @return rgba($value, $alpha);
  }

  $var: map.get($resolved, 'var');
  $rgb: core.get-rgb-from-resolved($resolved);
  @return rgba(var(#{$var}#{core.$rgb-suffix}, #{$rgb}), $alpha);
}

@function rem($token) {
  @return core.em($token, 1rem);
}

@function em($token) {
  @return core.em($token, 1em);
}

@mixin scope($set-name: null) {
  $original-set: core.$current;
  @include core.set-current($set-name);
  @content();
  @include core.set-current($original-set);
}

@mixin media($tokens...) {
  $conditions: ();
  @each $token in $tokens {
    $parsed: core.resolve-token($token);
    $value: map.get($parsed, 'value');
    $query: if(type-of($value) == 'string', unquote($value), inspect($value));

    // TODO: error if not a value?
    $conditions: append($conditions, $query, 'comma');
  }

  @media #{$conditions} {
    @content;
  }
}

@function all($token: '') {
  $resolved: core.resolve-token($token);
  $map: map.get($resolved, 'value');
  $path: map.get($resolved, 'path');
  $by-value: map.get($resolved, 'by-value');

  @return core.inner-all($map, $by-value, $path...);
}
