@use 'sass:map';
@use 'sass:string';
@use 'sass:color';
@use 'sass:math';
@use 'sass:list';

@use './helpers' as *;

$sets: () !default;
$default: 'default' !default;
$config: (
  enable-define: true,
  base: 16px,
  enable-rgb: true,
  enable-em: true,
) !default;

$current: $default;

// TODO: make part of config
$ref-start: '{';
$ref-end: '}';
$set-char: ':';
$path-char: '.';
$key-char: '-';
$var-char: '$';
$rgb-suffix: '--rgb';
$em-suffix: '--em';
$base-key: 'base';
$config-key: 'CONFIG';

// Private
@function token-from-path($path...) {
  @return to-string($path, $path-char);
}

@function get-value($map, $path...) {
  @if not deep-map-check($map, $path...) {
    $current-set: map.get($sets, $current);
    @if $map != $current-set {
      @return get-value($current-set, $path...);
    }

    $default-set: map.get($sets, $default);
    @if $map != $default-set {
      @return get-value($default-set, $path...);
    }

    $token: token-from-path($path...);
    @error "Token not found: #{$token}";
  }
  @return deep-map-get($map, $path...);
}

// Gets a CSS variable key
@function create-var-from-keys($path...) {
  $var: to-string($path, '-');
  @return --#{$var};
}

@function get-rgb-from-resolved($resolved) {
  $value: map.get($resolved, 'value');

  @if (type-of($value) == 'color') {
    @return to-rgb($value);
  }

  $ref: map.get($resolved, 'ref');
  @if ($ref) {
    $value: map.get($ref, 'value');
    $var: map.get($ref, 'var');
    $rgb: get-rgb-from-resolved($ref);
    @if ($rgb) {
      @return var(#{$var}#{$rgb-suffix}, $rgb);
    }
  }

  @return null;
}

@function get-rel-from-resolved($resolved) {
  $config: map.get($resolved, 'config');
  $base: map.get($config, $base-key) or 16px;
  $value: map.get($resolved, 'value');

  @if ($base and type-of($value) == 'number') {
    @return to-rel($value, $base);
  }

  $ref: map.get($resolved, 'ref');
  @if ($ref) {
    $value: map.get($ref, 'value');
    $var: map.get($ref, 'var');
    $rel: get-rel-from-resolved($ref);
    @if ($rel) {
      @return var(#{$var}#{$em-suffix}, $rel);
    }
  }

  @return null;
}

@mixin define-var-from-resolved($resolved) {
  $value: map.get($resolved, 'value');
  @if ($value) {
    $path: map.get($resolved, 'path');
    $config: map.get($resolved, 'config');
    $var: map.get($resolved, 'var');
    $type: map.get($resolved, 'type');

    #{$var}: $value;

    @if ($type == 'color' and map.get($config, enable-rgb)) {
      $rgb: get-rgb-from-resolved($resolved);
      @if ($rgb) {
        #{$var}#{$rgb-suffix}: $rgb;
      }
    }

    @if ($type == 'number' and map.get($config, enable-em)) {
      $rel: get-rel-from-resolved($resolved);
      @if ($rel) {
        #{$var}#{$em-suffix}: $rel;
      }
    }
  }
}

@function inner-all($map, $by-value, $path...) {
  $tokens: ();
  @each $key, $value in $map {
    $_path: list.append($path, $key);

    @if ($key != $config-key) {
      @if (type-of($value) == 'map') {
        $tokens: list.join($tokens, inner-all($value, $by-value, $_path...));
      } @else {
        $token: to-string($_path, $path-char);
        @if ($by-value) {
          $token: $var-char + $token;
        }
        $tokens: list.append($tokens, $token);
      }
    }
  }
  @return $tokens;
}

@function get-config($map, $path...) {
  $config-keys: ($config-key);

  @if (list.length($path) > 0) {
    $config-keys: list.set-nth($path, list.length($path), $config-key);
  }
  $local-config: map.get($map, $config-keys...);
  $config: map.merge($config, $local-config or ());

  @return $config;
}

@function em($token, $unit) {
  $resolved: resolve-token($token);
  $is-by-value: map.get($resolved, 'by-value');
  $keys: map.get($resolved, 'keys');
  $value: map.get($resolved, 'value');
  $type: map.get($resolved, 'type');
  $base: map.get($resolved, 'config', $base-key);

  @if ($type != 'number') {
    @error 'em() only works with numbers';
  }

  @if ($is-by-value) {
    $value: map.get($resolved, 'final');
    $em: to-rel($value, $base);
    @return $em * $unit;
  }

  // Doesn't work with references
  $em: get-rel-from-resolved($resolved);
  $var: map.get($resolved, 'var');
  @return calc(var(#{$var}#{$em-suffix}, $em) * $unit);
}

@function get-set-by-name($set-name) {
  $set-name: $set-name or $current or $default;
  @if ($set-name == '') {
    $set-name: $current or $default;
  }
  @if (not map.has-key($sets, $set-name)) {
    @error "Set not found: #{$set-name}";
  }
  @return map.get($sets, $set-name);
}

@function get-path-from-token($token) {
  @return string.split($token, $path-char);
}

@function parse-token($token) {
  $raw: $token;
  $set: $current;

  @if (string.index($token, $set-char)) {
    $split: string.split($token, $set-char);
    $set: list.nth($split, 1);
    $token: list.nth($split, 2);
  }

  $by-value: string.index($token, $var-char) == 1;
  @if ($by-value) {
    $token: string.slice($token, 1 + string.length($var-char));
  }

  $path: get-path-from-token($token);
  $var: null;
  @if (list.length($path) > 0) {
    $var: create-var-from-keys($path...);
  }

  $complete: $set + $set-char + $token;

  @return (
    complete: $complete,
    raw: $raw,
    token: $token,
    set: $set,
    path: $path,
    var: $var,
    by-value: $by-value
  );
}

@function get-from-resolved($resolved) {
  $is-by-value: map.get($resolved, 'by-value');

  @if ($is-by-value) {
    @return map.get($resolved, 'final');
  }

  $value: map.get($resolved, 'value');
  $var: map.get($resolved, 'var');
  @return var(#{$var}, $value);
}

@function resolve-token($token) {
  $parsed: parse-token($token);

  $token: map.get($parsed, 'token');
  $set-name: map.get($parsed, 'set');
  $path: map.get($parsed, 'path');

  $map: get-set-by-name($set-name);
  $value: $map;
  $ref: null;
  $config: get-config($map, $path...);
  $final: $value;

  @if ($token and $token != '') {
    $value: get-value($map, $path...);
    $final: $value;

    // Resolve references
    @if (type-of($value) == 'string') {
      @if (starts-with($value, $ref-start) and ends-with($value, $ref-end)) {
        $len: string.length($value);
        $token: str-slice(
          $value,
          1 + string.length($ref-start),
          -1 - string.length($ref-end)
        );
        $ref: resolve-token($token);
        $value: get-from-resolved($ref);
        $final: map.get($ref, 'final');
      }
    }
  }

  @return map.merge(
    $parsed,
    (
      // The value of the token (may be a reference)
      value: $value,
      // The config of the token
      config: $config,
      // The map containing the token
      map: $map,
      // The resolved reference (if any)
      ref: $ref,
      // The type of the token (string, number, etc.) of the final value
      type: type-of($final),
      // The final value of the token (resolved through references)
      final: $final
    )
  );
}

@mixin add-set($set-name, $map) {
  $sets: map.set($sets, $set-name, $map) !global;
}

@mixin set-current($set-name: $default) {
  @if (not map.has-key($sets, $set-name)) {
    @error "'#{$set-name}' is not defined.";
  }
  $current: $set-name !global;
}
