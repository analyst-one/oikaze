@use 'sass:map';
@use 'sass:string';

@use 'tokens' as tokens;

:root {
  @include tokens.css-definitions();
}

// Multiple utility classes can be generated from a single token.
@each $token in tokens.all('color') {
  $var: tokens.prop($token);
  $value: tokens.get($token);

  // remove the leading '--color-' from the variable name
  $var: string.slice($var, 9);

  .color-#{$var} {
    color: tokens.get($token);
  }

  .color-#{$var}-20 {
    color: tokens.alpha($token, 'opacity.20');
  }

  .bg-#{$var} {
    background-color: tokens.get($token);
  }
}

// We can also use the percentage() function to generate utility classes.
@each $token in tokens.all('$opacity') {
  $var: tokens.prop($token);
  $value: tokens.percentage($token);

  // remove the leading '--' from the variable name
  $var: string.slice($var, 3);

  .#{$var} {
    opacity: $value;
  }
}

// We can also use the apply() function to generate utility classes.
@each $token in tokens.all('$text', false) {
  $var: tokens.prop($token);

  // remove the leading '--text-' from the variable name
  $var: string.slice($var, 8);

  .text-#{$var} {
    @include tokens.apply($token);
  }
} 
