@use 'sass:map';
@use 'sass:string';
@use 'sass:color';
@use 'sass:math';
@use 'sass:list';

@use './helpers' as *;

$theme: () !default;

// TODO: make part of config
$rgb-suffix: '--rgb';
$em-suffix: '--em';

// Private
@function -get-value($map: $theme, $keys...) {
  @if not map.has-key($map, $keys...) {
    @error "'#{$keys}' is not defined.";
  }
  @return map.get($map, $keys...);
}

// Gets a CSS variable key
@function -get-var($keys...) {
  $token: to-string($keys, '-');
  @return --#{$token};
}

@function -get-keys($path) {
  $is-by-value: string.index($path, '$') == 1;
  @if ($is-by-value) {
    $path: string.slice($path, 2);
  }
  @return string.split($path, '.');
}

@mixin -spread-value($map, $value, $_keys...) {
  $_var: -get-var($_keys...);

  #{$_var}: $value;

  $base: map.get($map, 'base') or 16px;

  @if (type-of($value) == 'color') {
    #{$_var}#{$rgb-suffix}: to-rgb($value);
  } @else if ($base and type-of($value) == 'number') {
    @if (math.compatible($value, $base)) {
      #{$_var}#{$em-suffix}: to-rel($value, $base);
    }
  }

}

// This mixin sets the CSS variables for a given theme.
@mixin -spread-variables($map: $theme, $keys...) {
  @each $key, $value in $map {
    @if (type-of($value) == 'map') {
      @include -spread-variables($value, $keys..., $key);
    } @else if ($value and type-of($value) != 'list') {
      $_keys: list.append($keys, $key);
      @include -spread-value($map, $value, $_keys...);
    }
  }
}


@function -em($path, $unit, $map: $theme) {
  $is-by-value: string.index($path, '$') == 1;

  $keys: -get-keys($path);
  $value: -get-value($map, $keys...);

  $base-keys: list.set-nth($keys, list.length($keys), 'base');
  $root: map.get($map, $base-keys...);

  $em: to-rel($value, $root);

  @if ($is-by-value) {
    @return $em * $unit;
  }
  $_var: -get-var($keys...);
  @return calc(var(#{$_var}#{$em-suffix}, $em) * $unit);
}

// Public

// @function gg($token, $map: $theme) {
//   $is-by-value: string.index($token, '$') == 1;

//   $keys: -get-keys($token);
//   $value: -get-value($map, $keys...);

//   @if ($is-by-value) {
//     @return $value;
//   }

//   $_var: -get-var($keys...);
//   @return var(#{$_var}, $value);
// }

// This function returns the value for a given key.
// For example:
//   get('color.primary')    // returns var(--color-primary, #facd33)
//   get('$color.primary') // returns #facd33
@function get($token, $map: $theme) {
  $is-by-value: string.index($token, '$') == 1;

  $keys: -get-keys($token);
  $value: -get-value($map, $keys...);

  @if ($is-by-value) {
    @return $value;
  }

  $_var: -get-var($keys...);
  @return var(#{$_var}, $value);
}

@mixin spread-variables($map: $theme) {
  @include -spread-variables($map);
}

@function merge($map) {
  $theme: map.deep-merge($theme, $map) !global;
  @return $theme;
}

// Translation functions

// This function returns the color value for a given key.
// For example:
//   t.with-opacity('color.primary', 0.2)    // returns rgba(var(--color-primary--rgb, 250,205,51), 0.2)
//   t.with-opacity('$color.primary', 0.2) // returns rgba(250, 205, 51, 0.2)
@function with-opacity($path, $alpha: 1, $map: $theme) {
  $is-by-value: string.index($path, '$') == 1;

  $keys: -get-keys($path);
  $value: -get-value($map, $keys...);

  @if ($is-by-value) {
    @return rgba($value, $alpha);
  }
  $_var: -get-var($keys...);
  @return rgba(var(#{$_var}#{$rgb-suffix}, #{to-rgb($value)}), $alpha);
}

// This function returns the size value for a given key.
// For example:
//   t.rem('size.footer')    // returns calc(var(--size-footer, 46px) / var(--size-base, 16px) * 1rem)
//   t.rem('$size.footer')   // returns 2.875rem
@function rem($path, $map: $theme) {
  @return -em($path, 1rem, $map);
}

@function em($path, $map: $theme) {
  @return -em($path, 1em, $map);
}

@mixin media($keys...) {
  $conditions: ();
  @each $key in $keys {
    $raw: get($key);
    $query: if(
      type-of($raw) == 'string',
      unquote($raw),
      inspect($raw)
    );

    // TODO: error if not a value?
    $conditions: append($conditions, $query, comma);
  }

  @media #{$conditions} {
    @content;
  }
}
