@use "sass:color";
@use "sass:math";

@function to-rgb($hexColor) {
  // @return rgb(nth($rgb, 1), nth($rgb, 2), nth($rgb, 3));
  @return "#{color.red($hexColor)},#{color.green($hexColor)},#{color.blue($hexColor)}";
}

// Convert rem to px
@function to-rem($value, $base: 16px) {
  @if (not $base) {
    @return $value;
  }
  @if (strip-unit($value) == 0) {
    @return 0rem;
  }
  @if (math.compatible($value, $base)) {
    @return to-fixed(math.div($value, $base) * 1rem);
  }
  @return $value;
}

@function get-px($length) {
  @return if(math.compatible($length, 1px), 0px + $length, false);
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function to-string($list, $glue: "") {
  $result: nth($list, 1);

  @if length($list) > 1 {
    @for $i from 2 through length($list) {
      $result: $result + $glue + nth($list, $i);
    }
  }

  @return $result;
}

$sass-precision: 5;

@function to-fixed($float, $digits: 4) {
  @if $digits > $sass-precision {
    @warn "Sass sets default precision to #{$sass-precision} digits";
  }

  $pow: math.pow(10, $digits);
  @return math.div(math.round($float * $pow), $pow);
}
